{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","document","title","useState","isRunning","setIsRunning","timeStartPomodoro","timeLeft","setTimeLeft","useEffect","timer","setTimeout","clearTimeout","className","Math","floor","toString","padStart","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"wOA+CeA,MA3Cf,WACEC,SAASC,MAAQ,iBADJ,MAEqBC,oBAAS,GAF9B,mBAENC,EAFM,KAEKC,EAFL,OAGeF,mBAAS,MAA9BG,EAHM,sBAImBH,mBAASG,GAJ5B,mBAINC,EAJM,KAIIC,EAJJ,KAeb,OATAC,qBAAU,WACR,GAAKL,EAAL,CACA,IAAMM,EAAQC,YAAW,WACvBH,EAAYD,EAAS,OACpB,KAEH,OAAO,kBAAMK,aAAaF,QAI1B,sBAAKG,UAAU,SAAf,UACE,sBACEA,UAAU,QADZ,UAEGC,KAAKC,MAAOR,EAAW,IAAO,GAAM,IAAIS,WAAWC,SAAS,EAAG,KAFlE,IAGGH,KAAKC,MAAOR,EAAW,IAAQ,IAAIS,WAAWC,SAAS,EAAG,QAC7D,8BACE,wBACEJ,UAAU,eACVK,QAAS,kBAAMb,GAAcD,IAF/B,SAIGA,EAAY,QAAU,YAG3B,8BACE,wBACES,UAAU,eACVK,QAAS,WACPb,GAAa,GACbG,EAAYF,IAJhB,yBCtBOa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7B,SAAS8B,eAAe,SAM1BZ,M","file":"static/js/main.ef3a9dce.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n  document.title = \"Pomodoro Timer\"\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [timeStartPomodoro] = useState(1000 * 60 * 25);\r\n  const [timeLeft, setTimeLeft] = useState(timeStartPomodoro);  // milliseconds remaining\r\n\r\n  useEffect(() => {\r\n    if (!isRunning) return;\r\n    const timer = setTimeout(() => {\r\n      setTimeLeft(timeLeft-100);\r\n    }, 100);\r\n    // Clear timeout if the component is unmounted\r\n    return () => clearTimeout(timer);\r\n  });\r\n  \r\n  return (\r\n    <div className=\"center\">\r\n      <div \r\n        className=\"timer\">\r\n        {Math.floor((timeLeft / 1000 / 60) % 60).toString().padStart(2, '0')}:\r\n        {Math.floor((timeLeft / 1000) % 60).toString().padStart(2, '0')}</div>\r\n      <div>\r\n        <button\r\n          className=\"start-button\"\r\n          onClick={() => setIsRunning(!isRunning)}\r\n        >\r\n          {isRunning ? \"Pause\" : \"Start\"}\r\n        </button>\r\n      </div>\r\n      <div>\r\n        <button\r\n          className=\"reset-button\"\r\n          onClick={() => {\r\n            setIsRunning(false)\r\n            setTimeLeft(timeStartPomodoro)\r\n          }}>\r\n          Reset\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}