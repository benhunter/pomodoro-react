{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","document","title","isRunning","setIsRunning","useState","timeStartPomodoro","timeLeft","setTimeLeft","useEffect","timer","setTimeout","clearTimeout","_jsxs","className","children","Math","floor","toString","padStart","_jsx","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","getElementById"],"mappings":"yMA+CeA,MA3Cf,WACEC,SAASC,MAAQ,iBACjB,MAAOC,EAAWC,GAAgBC,oBAAS,IACpCC,GAAqBD,mBAAS,OAC9BE,EAAUC,GAAeH,mBAASC,GAWzC,OATAG,qBAAU,KACR,IAAKN,EAAW,OAChB,MAAMO,EAAQC,YAAW,KACvBH,EAAYD,EAAS,IAAI,GACxB,KAEH,MAAO,IAAMK,aAAaF,EAAM,IAIhCG,eAAA,OAAKC,UAAU,SAAQC,SAAA,CACrBF,eAAA,OACEC,UAAU,QAAOC,SAAA,CAChBC,KAAKC,MAAOV,EAAW,IAAO,GAAM,IAAIW,WAAWC,SAAS,EAAG,KAAK,IACpEH,KAAKC,MAAOV,EAAW,IAAQ,IAAIW,WAAWC,SAAS,EAAG,QAC7DC,cAAA,OAAAL,SACEK,cAAA,UACEN,UAAU,eACVO,QAASA,IAAMjB,GAAcD,GAAWY,SAEvCZ,EAAY,QAAU,YAG3BiB,cAAA,OAAAL,SACEK,cAAA,UACEN,UAAU,eACVO,QAASA,KACPjB,GAAa,GACbI,EAAYF,EAAkB,EAC9BS,SAAC,cAMb,ECjCeO,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,EAAGC,SAAQC,SAAQC,SAAQC,SAAQC,cAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EAAY,GAExB,ECHFQ,IAASC,OACPZ,cAACa,IAAMC,WAAU,CAAAnB,SACfK,cAACpB,EAAG,MAENC,SAASkC,eAAe,SAM1Bb,G","file":"static/js/main.776c00af.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport './App.css';\n\n\nfunction App() {\n  document.title = \"Pomodoro Timer\"\n  const [isRunning, setIsRunning] = useState(false);\n  const [timeStartPomodoro] = useState(1000 * 60 * 25);\n  const [timeLeft, setTimeLeft] = useState(timeStartPomodoro);  // milliseconds remaining\n\n  useEffect(() => {\n    if (!isRunning) return;\n    const timer = setTimeout(() => {\n      setTimeLeft(timeLeft-100);\n    }, 100);\n    // Clear timeout if the component is unmounted\n    return () => clearTimeout(timer);\n  });\n  \n  return (\n    <div className=\"center\">\n      <div \n        className=\"timer\">\n        {Math.floor((timeLeft / 1000 / 60) % 60).toString().padStart(2, '0')}:\n        {Math.floor((timeLeft / 1000) % 60).toString().padStart(2, '0')}</div>\n      <div>\n        <button\n          className=\"start-button\"\n          onClick={() => setIsRunning(!isRunning)}\n        >\n          {isRunning ? \"Pause\" : \"Start\"}\n        </button>\n      </div>\n      <div>\n        <button\n          className=\"reset-button\"\n          onClick={() => {\n            setIsRunning(false)\n            setTimeLeft(timeStartPomodoro)\n          }}>\n          Reset\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}